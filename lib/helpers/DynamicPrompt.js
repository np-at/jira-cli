var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.dynamicPrompt=exports.issueTypePrompt=exports.parentTaskPrompt=exports.getIssueSuggestions=exports.projectPrompt=exports.askIssueSummaryAndDetails=exports.additionalFields=void 0;const s=require("./helpers"),t=e(require("inquirer"));exports.additionalFields=async e=>{if(!e.project)throw new Error;await r(e)};const r=async e=>(await s.client.issues.getCreateIssueMetadata({projectKeys:[e.project.key],issuetypeIds:[e.issueType.id],expand:"projects,issuetypes,fields,projects.issuetypes.fields"})).projects[0].issueTypes[0].fields.map((e=>e.fields));exports.askIssueSummaryAndDetails=async e=>{const s=await t.default.prompt([{name:"summary",message:"enter the issue summary",type:"input",validate:(e,s)=>!(""===e.trim())},{name:"description",type:"input",message:"Enter the issue details"}]);e.summary=s.summary,e.description=s.description};exports.projectPrompt=async(e,r)=>{let a=[...new Set(await s.client.projects.getAllProjects({expand:"issueTypes"}))].map((e=>({name:e.name,value:e})));const o=r?.cache?.recent?.project?.name;o&&(a=a.sort(((e,s)=>e.name===o?-1:s.name===o?1:0)));const p={type:"autocomplete",name:"project",choices:a,source:()=>Promise.resolve(a),message:"choose a project",loop:!1},i=await t.default.prompt(p);e.project=i.project};exports.getIssueSuggestions=async(e,t)=>(await s.client.issueSearch.getIssuePickerSuggestions({query:e,currentProjectId:t.id})).sections.flatMap((e=>e.issues)).filter((e=>"Done"!==e.status));exports.parentTaskPrompt=async(e,s)=>{if(!e.project)throw new Error("parent project must be selected before choosing a parent task");const r=(await exports.getIssueSuggestions("",e.project)).map((e=>({name:e.summary??"unk",value:e}))),a=await t.default.prompt({type:"autocomplete",name:"parentTask",choices:r,message:"Choose parent task?",source:async(s,t)=>(await exports.getIssueSuggestions(t,e.project)).map((e=>({name:e.summary,value:e})))});e.parentTask=a.parentTask};exports.issueTypePrompt=async e=>{const s=[];if(!e.project)throw new ReferenceError("parent project missing in answers object");s.push(...e.project.issueTypes);const r=await t.default.prompt({type:"list",choices:[...new Set(s)].map((e=>({name:e.name,value:e}))),message:"choose an issue type",name:"issueType"});e.issueType=r.issueType},exports.dynamicPrompt=async function(e,s,t){switch(e){case"issueType":try{return await exports.issueTypePrompt(s)}catch(e){console.error(e)}break;case"project":try{return await exports.projectPrompt(s,t.cache.recent.project)}catch(e){console.log(e)}break;case"status":case"priority":break;case"details":try{return await exports.askIssueSummaryAndDetails(s)}catch(e){console.error(e)}break;case"parentTask":try{return await exports.parentTaskPrompt(s,t)}catch(e){console.error(e)}break;case"additional":try{return await exports.additionalFields(s)}catch(e){console.error(e)}}};