var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const s=e(require("../ssl_request")),t=e(require("../config")),a=e(require("async")),l=e(require("../utils")),r=e(require("inquirer")).default.createPromptModule();exports.default=function(){const e={query:null,table:null,isSubTask:!1,projects:[],projectMeta:{issuetypes:[]},priorities:[],answers:{fields:{}},issueType:null,ask(e,s,t,a,l){const u=[];if(l||!1===l)return s(l);if(a&&a.length>0){for(let e;e<a.length;e++)this.isSubTask?void 0!==a[e].subtask?a[e].subtask&&u.push("("+a[e].id+") "+(a[e].name?a[e].name:a[e].value)):u.push("("+a[e].id+") "+(a[e].name?a[e].name:a[e].value)):a[e].subtask||u.push("("+a[e].id+") "+(a[e].name?a[e].name:a[e].value));console.log(u.join("\n"))}r({message:e}).then((a=>{a.length>0?s(a):t?s(!1):this.ask(e,s)}))},askProject(e,s){this.ask("Type the project name or key: ",(t=>{let a=0,l=0;t=t.charAt(0).toUpperCase()+t.substring(1).toLowerCase();for(let e=0;e<this.projects.length;e++)(t===this.projects[e].key||t.toUpperCase()===this.projects[e].key||t===this.projects[e].name)&&(a=this.projects[e].id,l=e);a>0?s(a,l,t.toUpperCase()):(console.log('Project "'+t+'" does not exists.'),this.askProject(e,s))}),!1,null,e)},getMeta(e,a){this.query="rest/api/2/issue/createmeta",e&&(this.query+="?projectKeys="+e+"&expand=projects.issuetypes.fields"),s.default.get(t.default.auth.url+this.query).end(((e,s)=>{if(!s.ok){const e=l.default.extractErrorMessages(s).join("\n");return console.log(e),a(e)}a(null,s.body.projects)}))},askIssueType(s,t){const a=e.projectMeta.issuetypes;this.ask("Select issue type: ",(e=>{t(e)}),!1,a,s)},askRequired(s,a,l,r){if(!(s.required||t.default.default_create&&t.default.default_create.__always_ask&&t.default.default_create.__always_ask.fields&&t.default.default_create.__always_ask.fields[a]))return r();const u=(s.allowedValues?"Select ":"Enter ")+s.name+" : ";this.ask(u,(t=>t?("array"===s.schema.type?"string"!==s.schema.items?e.answers.fields[a]=[{id:t}]:(t=t.split(","),e.answers.fields[a]=t):"string"===s.schema.type?e.answers.fields[a]=t:e.answers.fields[a]={id:t},r()):e.askRequired(s,a,l,r)),!1,s.allowedValues,l)},saveIssue(a,r){this.query="rest/api/2/issue";const u=t.default.auth.url+this.query;!e.answers.fields.reporter.name&&e.answers.fields.reporter.id&&(e.answers.fields.reporter.name=e.answers.fields.reporter.id);const o=JSON.stringify(e.answers);a.verbose&&(console.log(e.answers),console.log(u),console.log(o)),s.default.post(u).send(o).end(((e,s)=>{if(!s.ok){a.verbose&&console.log(s);const e=l.default.extractErrorMessages(s).join("\n");return console.log(e)}return a.verbose&&console.log(s),console.log("Issue "+s.body.key+" created successfully!"),console.log("Open "+l.default.url.resolve(t.default.auth.url,"browse/"+s.body.key)),r()}))},create(s,l){a.default.waterfall([t=>{e.getMeta(null,((a,l)=>a?t(a):(e.projects=l,t(null,s))))},(s,a)=>{s.key&&t.default.default_create&&t.default.default_create[s.key]&&t.default.default_create[s.key].project&&!s.project&&t.default.default_create[s.key].project&&(s.project=t.default.default_create[s.key].project),e.askProject(s.project,((t,l,r)=>(s.projectId=t,s.projectIndex=l,s.project=r,e.answers.fields.project={id:t},a(null,s))))},(s,t)=>{e.getMeta(s.project,((a,l)=>a?t(a):(l.forEach((t=>{t.id===s.projectId&&(e.projectMeta=t)})),e.projectMeta?t(null,s):t("project meta not found"))))},(s,a)=>{s.key&&t.default.default_create&&t.default.default_create[s.key]&&t.default.default_create[s.key].issueType&&!s.type&&t.default.default_create[s.key].issueType&&(s.type=t.default.default_create[s.key].issueType),e.askIssueType(s.type,(t=>(e.answers.fields.issuetype={id:t},s.type=t,e.projectMeta.issuetypes.forEach((s=>{s.id===t&&(e.issueType=s)})),e.issueType?a(null,s):a(new Error("invalid issue type")))))},(s,l)=>{a.default.eachSeries(Object.keys(e.issueType.fields),((a,l)=>{const r=e.issueType.fields[a];let u;return r.allowedValues&&1===r.allowedValues.length?(u=r.allowedValues[0].id,l()):(s.verbose&&(console.log(s),console.log({eachField:r}),console.log({eachFieldKey:a})),s.key&&t.default.default_create&&t.default.default_create[s.key]&&t.default.default_create[s.key].default&&t.default.default_create[s.key].default[a]?(e.answers.fields[a]=t.default.default_create[s.key].default[a],l()):s[a]?(e.answers.fields[a]=s[a],l()):e.askRequired(r,a,u,l))}),(()=>l(null,s)))},(s,t)=>{e.saveIssue(s,t)}],(e=>l(e)))}};return e};