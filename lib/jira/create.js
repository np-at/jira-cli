var e=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0});const t=e(require("inquirer")),s=require("../helpers/helpers"),a=e(require("../config")),i=require("../helpers/DynamicPrompt"),r=e(require("inquirer-autocomplete-prompt")),o=e(require("../helpers/cache"));exports.default=async(e,s)=>{t.default.registerPrompt("autocomplete",r.default),e.command("create [project[-issue]]").description("Create an issue or a sub-task").option("-p, --project <project>","Rapid board on which project is to be created",String).option("-P, --priority <priority>","priority of the issue",String).option("-T --type <type>","NUMERIC Issue type",parseInt).option("-s --subtask <subtask>","Issue subtask",void 0).option("-S --summary <summary>","Issue Summary",void 0).option("-d --details <details>","Issue details",void 0).option("-a --assignee <assignee>","Issue assignee",void 0).option("-v --verbose","Verbose debugging output").action((async(e,t)=>{let a,i;t.parent=e||void 0;try{i=await n(t)}catch(e){a=e}finally{s(a,i)}}))};const n=async e=>{const r={...a.default.default_create.__always_ask.fields},n=new o.default;Object.assign(r,e),r.cache=await n.get();const p={};await i.projectPrompt(p,r),await i.issueTypePrompt(p),!0===p.issueType?.subtask&&await i.parentTaskPrompt(p,r);const c=await s.client.issueSearch.searchForIssuesUsingJqlGet({jql:`project=${p.project.id} AND issueType = "Epic" AND status != "Done"`}),u=r.cache.recent?.epic?.fields?.summary??void 0;if(!p.parentTask&&!0===(await t.default.prompt({name:"epicChild",type:"confirm",default:!0})).epicChild){const e=await t.default.prompt({type:"list",choices:c.issues.map((e=>({name:e.fields.summary,value:e}))).sort(((e,t)=>u?e.name===u?-1:t.name===u?1:0:0)),name:"epicParentAnswer"});p.epicParent=e.epicParentAnswer}await i.askIssueSummaryAndDetails(p);const d=await s.client.myself.getCurrentUser(),l=await t.default.prompt({name:"assignee",type:"list",choices:[{name:d.name??d.emailAddress,value:d}],default:d.name??d.emailAddress});p.assignee=l.assignee;const m={project:{id:p.project.id},assignee:{id:p.assignee.accountId},summary:p.summary,issuetype:{id:p.issueType.id},description:p.description};p.parentTask?m.parent={id:p.parentTask.id}:p.epicParent&&(m.parent={id:p.epicParent.id});try{const e=await s.client.issues.createIssue({fields:m});console.debug(e),await n.set({recent:{project:p.project,epic:p.epicParent}})}catch(p){console.error(p)}};