var e=this&&this.__createBinding||(Object.create?function(e,t,o,i){void 0===i&&(i=o),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,i){void 0===i&&(i=o),e[i]=t[o]}),t=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(o){if(o&&o.__esModule)return o;var i={};if(null!=o)for(var n in o)"default"!==n&&Object.prototype.hasOwnProperty.call(o,n)&&e(i,o,n);return t(i,o),i},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.issuePickerCompletionAsync=void 0;const n=require("commander"),s=i(require("./config")),a=i(require("./auth")),r=o(require("./jira/ls")),l=o(require("./jira/describe")),u=i(require("./jira/assign")),c=i(require("./jira/fix")),d=i(require("./jira/release")),p=i(require("./jira/send")),m=i(require("./jira/comment")),f=i(require("./jira/sprint")),g=i(require("./jira/transitions")),h=i(require("./jira/worklog")),w=i(require("./jira/link")),S=i(require("./jira/watch")),j=i(require("./jira/addToSprint")),b=i(require("./jira/new")),v=i(require("./jira/edit")),y=i(require("../package.json")),q=i(require("./jira/create")),k=o(require("os")),_=require("./helpers/helpers");async function I(...e){try{const t=await _.client.issueSearch.getIssuePickerSuggestions({query:e[1]?.args?.join(" ")??""});return void console.log(t.sections.flatMap((e=>e.issues)).map((e=>String(`${e.key}|*|${e.summary}`))).join(k.EOL))}catch(e){console.error(e)}}exports.issuePickerCompletionAsync=I,exports.default=(async()=>{function e(e,t){e&&(console.log(...e.toString()),process.exit(1)),process.exit(0)}const t=(new n.Command).enablePositionalOptions(!0).storeOptionsAsProperties(!1).allowUnknownOption(!0).allowExcessArguments(!0);t.version(y.default.version),r.lsCommand(t,e),t.command("_complete [cursorPos] [commandAst] [wordToComplete]").action((async(...e)=>{const o=parseInt(e[0]),i=(e[2],e[1].split(" ")),n=i.shift(),s=t.commands.map((e=>e.name())).filter((e=>"_complete"!==e));if(0===i.length)return void console.log(t.commands.filter((e=>"_complete"!==e.name())).flatMap((e=>`${e.name()}|*|${e.usage()}`)).join(k.EOL));if(1===i.length){let e=n.length;for(let t=0;t<i.length;t++)e++,e+=i[t].length;if(e>=o)return void console.log(s.filter((e=>e.normalize().startsWith(i[0].normalize()))).join(k.EOL))}let a=t._findCommand(i[0]);for(let e=1;e<=i.length;e++){const t=a.commands.find((t=>t?.name()?.normalize()===i[e]?.normalize()));if(!t||e>=i.length-1)try{const t=i.slice(e)??[];return void a._dispatchSubcommand("_complete",t,[])}catch(e){console.log(e),console.error(e)}else a=t}console.log("ERRROR")})),t.command("start <issue>").description("Start working on an issue.").action((t=>{g.default.start(t,e)})),t.command("stop <issue>").description("Stop working on an issue.").action((t=>{g.default.stop(t,e)})),t.command("review <issue> [assignee]").description("Mark issue as being reviewed [by assignee(optional)].").action(((t,o)=>{g.default.review(t,e),o&&u.default().to(t,o)})),t.command("done <issue>").option("-r, --resolution <name>","resolution name (e.g. 'Resolved')",String).option("-t, --timeSpent <time>","how much time spent (e.g. '3h 30m')",String).description("Mark issue as finished.").action(((t,o)=>{o.timeSpent&&h.default.add(t,o.timeSpent,"auto worklog",new Date),g.default.done(t,o.resolution,e)})).command("_complete").action(I),t.command("invalid <issue>").description("Mark issue as finished.").action(((t,o)=>{g.default.invalid(t,o,e)})),t.command("mark <issue> [transitionId]").description("Mark issue as.").action(((t,o)=>{o?g.default.doTransition(t,o,(i=>{i&&i.includes("(502)")?console.log("transition ("+o+") not valid for this issue ("+t+")"):console.log("marked issue with transition "+o),e(i)})):g.default.makeTransition(t,e)})),t.command("edit <issue> [input]").description("edit issue.").action(((t,o)=>{o?v.default.editWithInputPutBody(t,o,e):v.default.edit(t,e)})),t.command("running").description("List issues in progress.").action((()=>{r.default.showInProgress(e)})),t.command("jql <query>").description("Run JQL query").option("-c, --custom <name>","Filter by custom jql saved in jira config").option("-s, --custom_sql <name>","Filter by custom alasql saved in jira config").option("-j, --json <value>","Output in json",String(0)).option("-v, --verbose","verbose output").action(((t,o)=>{o.custom_sql?r.default.aggregateResults(t,o,e):o.json?r.default.jqlSearch(t,o,((t,o)=>{o&&console.log(JSON.stringify(o)),e(t)})):r.default.jqlSearch(t,o,e)})),t.command("link <from> <to> [linkValue]").description("link issues").action(((t,o,i,n)=>{w.default(t,o,i,n,e)})),t.command("search <term>").description("Find issues.").action((t=>{r.default.search(t,e)})),t.command("assign <issue> [accountId]").description("Assign an issue to <user>. Provide only issue# to assign to me").action(((e,t)=>{t?(t=s.default.user_alias[t]||t,u.default().to(e,t)):u.default().me(e)})),t.command("watch <issue> [user]").description("Watch an issue to <user>. Provide only issue# to watch to me").action(((e,t)=>{t?(t=s.default.user_alias[t],S.default.to(e,t)):S.default.me(e)})),t.command("comment <issue> [text]").description("Comment an issue.").action((function(e,t){t?(t=t.replace(/\[~(.*?)\]/g,(function(e,t,o){return s.default.user_alias[t]?"[~"+s.default.user_alias[t]+"]":t})),m.default().to(e,t)):m.default().show(e)})),await l.addDescribeCommand(t),t.command("open <issue>").description("Open an issue in a browser").action((function(e,t){l.default.open(e)})).command("_complete").action(I),t.command("worklog <issue>").description("Show worklog about an issue").action((function(e){h.default.show(e)})).command("_complete").action(I),t.command("worklogadd <issue> <timeSpent> [comment]").description("Log work for an issue").option("-s, --startedAt [value]","Set date of work (default is now)").action((function(e,t,o,i){const n=i.startedAt||(new Date).toString(),s=new Date(n);h.default.add(e,t,o,s)})).on("--help",(function(){console.log("  Worklog Add Help:"),console.log(),console.log("    <issue>: JIRA issue to log work for"),console.log("    <timeSpent>: how much time spent (e.g. '3h 30m')"),console.log("    <comment> (optional) comment"),console.log()})),await q.default(t,e),t.command("new [key]").description("Create an issue or a sub-task").option("-p, --project <project>","Rapid board on which project is to be created",String).option("-P, --priority <priority>","priority of the issue",String).option("-T --type <type>","Issue type",String).option("-s --subtask <subtask>","Issue subtask",String).option("-S --summary <summary>","Issue summary",String).option("-d --details <details>","Issue details",String).option("-c --component <component>","Issue component",String).option("-l --label <label>","Issue label",String).option("-a --assignee <assignee>","Issue assignee",String).option("-v --verbose","Verbose debugging output").action(((t,o)=>{o.key=t,b.default().create(o,e)})),t.command("config").description("Change configuration").option("-c, --clear","Clear stored configuration").option("-u, --url","Print url in config").option("-t, --template <template>","Start config with this given template",String).option("-v, --verbose","verbose debugging output").action((function(e){e.clear?a.default.clearConfig():e.url?console.log(s.default.auth.url):a.default.setup(e)})).on("--help",(function(){console.log("  Config Help:"),console.log(),console.log("    Jira URL: https://foo.atlassian.net/"),console.log("    Username: user (for user@foo.bar)"),console.log("    Password: Your password"),console.log(""),console.log("WARNING:After three failed login attempts Atlassian forces a CAPTCHA login"),console.log("WARNING:  which can only be done via the browser.")})),t.command("sprint").description("Works with sprint boards\n\t\t\t\tWith no arguments, displays all rapid boards\n\t\t\t\tWith -r argument, attempt to find a single rapid board\n \t\t\t\tand display its active sprints\n\t\t\t\tWith both -r and -s arguments\n \t\t\t\tattempt to get a single rapidboard/ sprint and show its issues. If\n \t\t\t\ta single sprint board isnt found, show all matching sprint boards\n").option("-r, --rapidboard <name>","Rapidboard to show sprints for",String).option("-s, --sprint <name>","Sprint to show the issues",String).option("-a, --add <projIssue> ","Add project issue to sprint",String).option("-i, --sprintId <sprintId> ","Id of the sprint which you want your issues to be added to",String).option("-j, --jql <jql> ","jql of the issues which you want to add to the sprint",String).action((function(t){t.add?j.default().addIssuesViaKey(t,e):t.jql?j.default().addAllJqlToSprint(t,e):f.default(t.rapidboard,t.sprint,e)})),t.command("fix <issue> <version>").description("Set FixVersion of an issue to <version>.").option("-a, --append","Append fix instead of over-write").action((function(e,t,o){o.append?c.default.append(e,t):c.default.to(e,t)})),t.command("release <version>").description("Create a FixVersion/Release (see release -h for more details)").option("-p, --project <name>","Project",String).option("-d, --details <name>","Description",String).option("-r, --released","Set released to true - default is false").action((function(e,t){d.default.create(e,t)})),t.command("send").description("Send email report (see send -h for more details)").option("-i, --projectId <id>","Project ID",String).option("-p, --project_prefix <XX>","Project Prefix",String).option("-v, --version <number>","Version ID Number",String).option("-n, --name <name>","release name",String).option("-f, --from <name>","from name",String).option("-t, --to <name>","comma seperated email list",String).option("-c, --cc <name>","comma seperated email list",String).option("-s, --subject <name>","email subject",String).option("-x, --password <password>","email password",String).option("-e, --template <file>","email template",String).action((function(e){p.default.send(e)})),await t.parseAsync(),0===t.args.length&&(console.log("\nYour first step is to run the config option.\n"),t.help())})();